spring.application.name=User-Service

# Port in which you want to run your server.
server.port=6902

# Your jdbc::mysql://{mySqlIP}:{mySqlPORT}/{databaseName}?{extraParams}
spring.datasource.url=jdbc:mysql://localhost:3306/spring?serverTimezone=UTC&createDatabaseIfNotExist=true&useSSL=false
# Mysql Username
spring.datasource.name=hungerbox
# Mysql Password
spring.datasource.password=hungerbox

# Will be used to show database queries in the console
spring.jpa.show-sql=true
spring.jpa.generate-ddl=true
# This will check for changes and entities and will update accordingly in database as well.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.jpa.defer-datasource-initialization=true
# data.sql queries will be executed once the database is completely initialised.

# Credentials to login into spring boot login form which will be displayed at http://localhost:{portNumber}
# This is just a handling for spring boot security where you are supposed to log-in first with these credentials
# for calling apis.
spring.security.user.name=ankit
spring.security.user.password=qwerty123

# Redis configs
spring.data.redis.host=localhost
spring.data.redis.port=6379
# spring.data.redis.password=your_redis_password  # Optional

# IP and Port at which eureka server is running.
eureka.client.service-url.defaultZone=${EUREKA_SERVER_URL:http://localhost:5999/eureka/}

# Number of concurrent connections this service can hold i.e. number of threads the thread pool will have.
server.tomcat.max-connections=201

# =========================================
# --- Logging Configuration ---
# =========================================
# Configure Kafka details for the Logback Kafka Appender
# Points to the Kafka service defined in docker-compose.yml, accessed via its exposed host port
logging.kafka.bootstrap-servers=localhost:9092
# Kafka topic where logs will be sent (must match Fluentd input config)
logging.kafka.topic=microservice-logs

# Logback configuration file location (uses default logback-spring.xml)
# logging.config=classpath:logback-spring.xml

# Optional: Define log levels here (can also be done in logback-spring.xml)
# logging.level.root=INFO
# logging.level.com.example.userservice=DEBUG
# logging.level.org.springframework.web=INFO
# logging.level.org.hibernate=WARN

# =========================================
# --- Distributed Tracing Configuration ---
# =========================================
# Enable tracing (generates traceId and spanId for logs)
management.tracing.enabled=true

# Sampling strategy (1.0 = 100% sampling, good for dev; use lower value like 0.1 for prod)
management.tracing.sampling.probability=1.0

# --- Trace EXPORT Configuration (REMOVED/COMMENTED) ---
# Your docker-compose.yml doesn't include Zipkin/Jaeger.
# Logs sent to Kafka/Fluentd/Elasticsearch will CONTAIN trace/span IDs,
# allowing correlation in Kibana/Grafana.
# If you specifically need to EXPORT trace spans to a separate system like Zipkin/Jaeger,
# you need to add that system to your docker-compose.yml and uncomment/configure below.

# management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans # REMOVED - No Zipkin service in compose file

# If you were sending traces via Kafka (less common than HTTP for Zipkin/Jaeger)
# management.tracing.exporter.kafka.enabled=false # Ensure this is disabled or remove
# management.tracing.exporter.kafka.topic=zipkin-spans
# management.tracing.exporter.kafka.producer.bootstrap-servers=${logging.kafka.bootstrap-servers}